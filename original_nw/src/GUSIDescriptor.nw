%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Project	:	GUSI				-	Grand Unified Socket Interface
% File		:	GUSIDescriptor.nw	-	Descriptor Table
% Author	:	Matthias Neeracher
% Language	:	C++
% 
% $Log: GUSIDescriptor.nw,v $
% Revision 1.16  2001/03/09 09:26:05  neeri
% Tweaks for Natty support
%
% Revision 1.15  2001/01/22 04:31:11  neeri
% Last minute changes for 2.1.5
%
% Revision 1.14  2001/01/17 08:40:17  neeri
% Prevent inlining of overridable functions
%
% Revision 1.13  2000/06/12 04:23:43  neeri
% Return values, not references; Introduce support for multiple descriptor tables
%
% Revision 1.12  2000/05/23 06:58:03  neeri
% Improve formatting
%
% Revision 1.11  2000/03/15 07:14:26  neeri
% Prevent double destruction of descriptor table
%
% Revision 1.10  2000/03/06 06:26:57  neeri
% Introduce (and call) CloseAllDescriptors()
%
% Revision 1.9  1999/08/26 05:45:01  neeri
% Fixes for literate edition of source code
%
% Revision 1.8  1999/08/02 07:02:43  neeri
% Support for asynchronous errors and other socket options
%
% Revision 1.7  1999/06/30 07:42:05  neeri
% Getting ready to release 2.0b3
%
% Revision 1.6  1999/05/29 06:26:42  neeri
% Fixed header guards
%
% Revision 1.5  1999/04/29 05:00:48  neeri
% Fix bug with bizarre uses of dup2
%
% Revision 1.4  1999/03/17 09:05:06  neeri
% Added GUSITimer, expanded docs
%
% Revision 1.3  1998/10/11 16:45:12  neeri
% Ready to release 2.0a2
%
% Revision 1.2  1998/08/01 21:32:03  neeri
% About ready for 2.0a1
%
% Revision 1.1  1998/01/25 21:02:44  neeri
% Engine implemented, except for signals & scheduling
%
% Revision 1.1  1996/12/16 02:12:40  neeri
% TCP Sockets sort of work
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\chapter{Mapping descriptors to sockets}

POSIX routines do not, of course, operate on [[GUSISockets]] but on 
numerical descriptors. The [[GUSIDescriptorTable]] singleton maps between
descriptors and their [[GUSISockets]].
<<GUSIDescriptor.h>>=
#ifndef _GUSIDescriptor_
#define _GUSIDescriptor_

#ifdef GUSI_SOURCE

#include "GUSISocket.h"

#include <ConditionalMacros.h>

#if PRAGMA_STRUCT_ALIGN
#pragma options align=native
#endif

<<Definition of class [[GUSIDescriptorTable]]>>

#if PRAGMA_STRUCT_ALIGN
#pragma options align=reset
#endif

<<Hooks for ANSI library interfaces>>

<<Inline member functions for class [[GUSIDescriptorTable]]>>

#endif /* GUSI_SOURCE */

#endif /* _GUSIDescriptor_ */
@

<<GUSIDescriptor.cp>>=
#include "GUSIInternal.h"
#include "GUSIDescriptor.h"
#include "GUSIBasics.h"
#include "GUSIDiag.h"
#include "GUSINull.h"

#include <errno.h>
#include <fcntl.h>
#include <utility>
#include <memory>

GUSI_USING_STD_NAMESPACE

<<Member functions for class [[GUSIDescriptorTable]]>>
@

\section{Definition of [[GUSIDescriptorTable]]}

A [[GUSIDescriptorTable]] is another singleton class, behaving in many aspects
like an array of [[GUSISocket]] pointers. [[InstallSocket]] installs a new socket 
into the table, picking the first available slot with a descriptor greater than
or equal to [[start]]. [[RemoveSocket]] empties one slot. 
[[GUSIDescriptorTable::LookupSocket]] is a shorthand for 
[[ (*GUSIDescriptorTable::Instance())[fd] ]].

To allow for light-weight processes, we provide a copy constructor and
the [[SetInstance]] member.
<<Definition of class [[GUSIDescriptorTable]]>>=
class GUSIDescriptorTable {
public:
	enum { SIZE = 64 };
	
	static GUSIDescriptorTable * 	Instance();
	
	int					InstallSocket(GUSISocket * sock, int start = 0);
	int					RemoveSocket(int fd);
	GUSISocket * 		operator[](int fd);
	static GUSISocket *	LookupSocket(int fd);
	
	class iterator;
	friend class iterator;
	
	iterator			begin();
	iterator			end();
	
	~GUSIDescriptorTable();
	
	static void			CloseAllDescriptors();

	static void SetInstance(GUSIDescriptorTable * table);
	
	GUSIDescriptorTable();
	GUSIDescriptorTable(const GUSIDescriptorTable & parent);
private:
	<<Privatissima of [[GUSIDescriptorTable]]>>
};
@

\section{Implementation of [[GUSIDescriptorTable]]}

On creation, a [[GUSIDescriptorTable]] clears all descriptors.
<<Privatissima of [[GUSIDescriptorTable]]>>=
GUSISocket *	fSocket[SIZE];
int				fInvalidDescriptor;
<<Member functions for class [[GUSIDescriptorTable]]>>=
GUSIDescriptorTable::GUSIDescriptorTable()
	: fInvalidDescriptor(0)
{
}
@

If no instance exists yet, [[GUSIDescriptorTable::Instance]] creates one and
calls [[GUSISetupConsole]] if the [[setupConsole]] parameter is true. 
[[GUSISetupConsole]] calls [[GUSIDefaultSetupConsole]], which first calls
[[GUSISetupConsoleDescriptors]] to set up file descriptors 0, 1, and 2, and
then calls [[GUSISetupConsoleStdio]] to deal with the necessary initializations
on the stdio level.
<<Hooks for ANSI library interfaces>>=
extern "C" {
void GUSISetupDescriptorTable();
void GUSISetupConsole();
void GUSIDefaultSetupConsole();
void GUSISetupConsoleDescriptors();
void GUSISetupConsoleStdio();
}
<<Member functions for class [[GUSIDescriptorTable]]>>=
#ifdef __MRC__
#pragma noinline_func GUSISetupConsole, GUSISetupConsoleDescriptors, GUSISetupConsoleStdio
#pragma noinline_func GUSIStdioClose, GUSIStdioFlush, GUSISetupDescriptorTable
#endif
<<Privatissima of [[GUSIDescriptorTable]]>>=
static	GUSIDescriptorTable	* sGUSIDescriptorTable;
<<Member functions for class [[GUSIDescriptorTable]]>>=
GUSIDescriptorTable	* GUSIDescriptorTable::sGUSIDescriptorTable;

<<Default implementation of [[GUSISetupConsole]]>>
<<Default implementation of [[GUSISetupDescriptorTable]]>>

GUSIDescriptorTable * GUSIDescriptorTable::Instance()
{
	static bool sNeedConsoleSetup = true;
	
	if (!sGUSIDescriptorTable) {
		GUSISetupDescriptorTable();
		
		if (!sGUSIDescriptorTable)
			sGUSIDescriptorTable = new GUSIDescriptorTable();			
	}
	if (sNeedConsoleSetup) {
		sNeedConsoleSetup = false;
		GUSISetupConsole();
	}
	return sGUSIDescriptorTable;
}

void GUSIDescriptorTable::SetInstance(GUSIDescriptorTable * table)
{
	sGUSIDescriptorTable = table;
}

void GUSIDescriptorTable::CloseAllDescriptors()
{
	delete sGUSIDescriptorTable;
	sGUSIDescriptorTable	= nil;
}
@

If, for any reason, the default descriptor table does not do the job for you, override
[[GUSISetupDescriptorTable]].
<<Default implementation of [[GUSISetupDescriptorTable]]>>=
//
// Prevent inlining to allow override
//
#ifdef __MWERKS__
#pragma dont_inline on
#endif

void GUSISetupDescriptorTable()
{
}

#ifdef __MWERKS__
#pragma dont_inline reset
#endif
@ %def GUSISetupDescriptorTable

Application programmers may elect to override [[GUSISetupConsole]] to do their
own initializations (notably to add further socket factories and devices), but 
if they chose to do so, they generally should include a call to
[[GUSIDefaultSetupConsole]] in their version.
<<Default implementation of [[GUSISetupConsole]]>>=
//
// Prevent inlining to allow override
//
#ifdef __MWERKS__
#pragma dont_inline on
#endif

void GUSISetupConsole()
{
	GUSIDefaultSetupConsole();
}

#ifdef __MWERKS__
#pragma dont_inline reset
#endif
@ %def GUSISetupConsole

The file descriptor part and the stdio part of the initialization functionality
are usually handled in different GUSI sublibraries, therefore we separate them
into different hooks. There never should be a reason to override 
[[GUSIDefaultSetupConsole]] itself.
<<Default implementation of [[GUSISetupConsole]]>>=
void GUSIDefaultSetupConsole()
{
	GUSISetupConsoleDescriptors();
	GUSISetupConsoleStdio();
}
@ %def GUSIDefaultSetupConsole

It may be necessary to override this function (notably for MPW support), but this
version covers the basic case. To avoid any dependence on Null devices being
installed in the device table, we call the instance directly.
<<Default implementation of [[GUSISetupConsole]]>>=
//
// Prevent inlining to allow override
//
#ifdef __MWERKS__
#pragma dont_inline on
#endif

void GUSISetupConsoleDescriptors()
{
	GUSIDescriptorTable * table = GUSIDescriptorTable::Instance();
	GUSINullDevice *      null  = GUSINullDevice::Instance();
	
	if (open("dev:console", O_RDONLY) < 0)
		table->InstallSocket(null->open());
	if (open("dev:console", O_WRONLY) < 0)
		table->InstallSocket(null->open());
	if (open("dev:console", O_WRONLY) < 0)
		table->InstallSocket(null->open());
}

#ifdef __MWERKS__
#pragma dont_inline reset
#endif
@ %def GUSISetupConsoleDescriptors

Destructing a [[GUSIDescriptorTable]] may be a bit problematic, as this
may have effects reaching up into the stdio layer. We therefore factor 
out the stdio aspects into the procedures [[StdioClose]] and [[StdioFlush]]
which we then can redefine in other, stdio library specific, libraries.
<<Hooks for ANSI library interfaces>>=
extern "C" {
void GUSIStdioClose();	
void GUSIStdioFlush();
}
<<Member functions for class [[GUSIDescriptorTable]]>>=
//
// Prevent inlining to allow override
//
#ifdef __MWERKS__
#pragma dont_inline on
#endif

void GUSIStdioClose() { }
void GUSIStdioFlush() { }
void GUSISetupConsoleStdio() { }

#ifdef __MWERKS__
#pragma dont_inline reset
#endif

GUSIDescriptorTable::~GUSIDescriptorTable()
{
	GUSIStdioFlush();
	GUSIStdioClose();	
	
	for (iterator i = begin(); i != end(); ++i) 
		RemoveSocket(*i);
}
@

To keep the range of descriptor slots to search as small as possible, only 
descriptors smaller than [[fInvalidDescriptor]] are potentially valid.
<<Member functions for class [[GUSIDescriptorTable]]>>=
int GUSIDescriptorTable::InstallSocket(GUSISocket * sock, int start)
{
	if (start<0 || start >= SIZE)
		return GUSISetPosixError(EINVAL);

	while (start<fInvalidDescriptor)
		if (!fSocket[start])
			goto found;
		else
			++start;
	while (start > fInvalidDescriptor)
		fSocket[fInvalidDescriptor++] = static_cast<GUSISocket *>(nil);
	if (start < SIZE)
		++fInvalidDescriptor;
	else
		return GUSISetPosixError(EMFILE);

found:
	fSocket[start] = sock;
		
	sock->AddReference();
	
	return start;
}
@

<<Member functions for class [[GUSIDescriptorTable]]>>=
int GUSIDescriptorTable::RemoveSocket(int fd)
{
	GUSISocket *	sock;

	if (fd<0 || fd >= fInvalidDescriptor || !(sock = fSocket[fd]))
		return GUSISetPosixError(EBADF);

	fSocket[fd] 	=	nil;

	sock->RemoveReference();

	return 0;
}
@

<<Member functions for class [[GUSIDescriptorTable]]>>=
GUSISocket * GUSIDescriptorTable::operator[](int fd)
{
	GUSISocket * sock;
	
	if (fd<0 || fd >= fInvalidDescriptor || !(sock = fSocket[fd]))
		return GUSISetPosixError(EBADF), static_cast<GUSISocket *>(nil);
	else
		return sock;
}
@

<<Member functions for class [[GUSIDescriptorTable]]>>=
GUSISocket * GUSIDescriptorTable::LookupSocket(int fd)
{
	GUSIDescriptorTable * 	table = Instance();
	GUSISocket * 			sock;
	
	if (fd<0 || fd >= table->fInvalidDescriptor || !(sock = table->fSocket[fd]))
		return GUSISetPosixError(EBADF), static_cast<GUSISocket *>(nil);
	else
		return sock;
}
@

<<Inline member functions for class [[GUSIDescriptorTable]]>>=
class GUSIDescriptorTable::iterator {
public:
	iterator(GUSIDescriptorTable * table, int fd = 0) : fTable(table), fFd(fd) {} 	
	GUSIDescriptorTable::iterator & operator++();
	GUSIDescriptorTable::iterator operator++(int);
	int	operator*()				{ return fFd;							}
	bool operator==(const GUSIDescriptorTable::iterator & other) const;
private:
	GUSIDescriptorTable *		fTable;
	int							fFd;
};

inline GUSIDescriptorTable::iterator & GUSIDescriptorTable::iterator::operator++()
{
	while (++fFd < fTable->fInvalidDescriptor && !fTable->fSocket[fFd])
		;
	
	return *this;
}

inline GUSIDescriptorTable::iterator GUSIDescriptorTable::iterator::operator++(int)
{
	int oldFD = fFd;
	
	while (++fFd < fTable->fInvalidDescriptor && !fTable->fSocket[fFd])
		;
	
	return GUSIDescriptorTable::iterator(fTable, oldFD);
}

inline bool GUSIDescriptorTable::iterator::operator==(
				const GUSIDescriptorTable::iterator & other) const
{
	return fFd == other.fFd;
}

inline GUSIDescriptorTable::iterator GUSIDescriptorTable::begin()
{
	return iterator(this);
}

inline GUSIDescriptorTable::iterator GUSIDescriptorTable::end()
{
	return iterator(this, fInvalidDescriptor);
}
@

The copy constructor has to increment the reference counts of all sockets in the table.
<<Member functions for class [[GUSIDescriptorTable]]>>=
GUSIDescriptorTable::GUSIDescriptorTable(const GUSIDescriptorTable & parent)
 : fInvalidDescriptor(parent.fInvalidDescriptor)
{
	memcpy(fSocket, parent.fSocket, fInvalidDescriptor*sizeof(GUSISocket *));

	iterator e = end();
	for (iterator i = begin(); i != e; ++i)
		if (GUSISocket * s = fSocket[*i])
			s->AddReference();
}
@
