%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Project	:	GUSI				-	Grand Unified Socket Interface
% File		:	GUSINetDB.nw		-	Convert between names and adresses
% Author	:	Matthias Neeracher
% Language	:	C++
% 
% $Log: GUSINetDB.nw,v $
% Revision 1.13  2002/08/30 07:36:14  neeri
% Used to skip first service entry [GUSI Bug #548891]
%
% Revision 1.12  2001/05/09 08:26:32  neeri
% Hostname needs to return a name, not a dotted decimal tuple (MacPerl Bug #421705)
%
% Revision 1.11  2001/03/09 09:22:58  neeri
% Used delete where delete[] was appropriate
%
% Revision 1.10  2000/12/23 06:11:55  neeri
% Add SSH service
%
% Revision 1.9  2000/05/23 07:10:35  neeri
% Improve formatting
%
% Revision 1.8  2000/03/15 07:18:43  neeri
% Fix GUSIBuiltinServiceDB::sServices
%
% Revision 1.7  1999/11/15 07:23:23  neeri
% Fix gethostname for non-TCP/IP case
%
% Revision 1.6  1999/08/26 05:45:05  neeri
% Fixes for literate edition of source code
%
% Revision 1.5  1999/05/30 03:09:30  neeri
% Added support for MPW compilers
%
% Revision 1.4  1999/03/17 09:05:10  neeri
% Added GUSITimer, expanded docs
%
% Revision 1.3  1998/11/22 23:06:58  neeri
% Releasing 2.0a4 in a hurry
%
% Revision 1.2  1998/10/25 11:33:38  neeri
% Fixed disastrous bug in inet_addr, support alternative NL conventions
%
% Revision 1.1  1998/10/11 16:45:20  neeri
% Ready to release 2.0a2
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\chapter{Converting Between Names and IP Addresses}

The [[GUSINetDB]] class coordinates access to the domain name server database.

The [[GUSIServiceDB]] class is responsible for a database of TCP/IP service
name to port number mappings. 

The [[hostent]] and [[servent]] classes are somewhat inconvenient to set up as
they reference extra chunks of memory, so we define the wrapper classes 
[[GUSIhostent]] and [[GUSIservent]].
<<GUSINetDB.h>>=
#ifndef _GUSINetDB_
#define _GUSINetDB_

#ifdef GUSI_SOURCE
#include "GUSISpecific.h"

#include <sys/types.h>
#include <netdb.h>
#include <arpa/inet.h>

#include <ConditionalMacros.h>

#if PRAGMA_STRUCT_ALIGN
#pragma options align=native
#endif

<<Definition of class [[GUSIhostent]]>>
<<Definition of class [[GUSIservent]]>>
<<Definition of class [[GUSIServiceDB]]>>
<<Definition of class [[GUSINetDB]]>>

#if PRAGMA_STRUCT_ALIGN
#pragma options align=reset
#endif

#ifdef GUSI_INTERNAL

<<Inline member functions for class [[GUSIServiceDB]]>>

#endif /* GUSI_INTERNAL */

#endif /* GUSI_SOURCE */

#endif /* _GUSINetDB_ */
@

<<GUSINetDB.cp>>=
#include "GUSIInternal.h"
#include "GUSINetDB.h"
#include "GUSIFileSpec.h"
#include "GUSIFactory.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>

#include <Resources.h>
#include <Memory.h>

<<Member functions for class [[GUSINetDB]]>>
<<Member functions for class [[GUSIServiceDB]]>>
<<Member functions for class [[GUSIhostent]]>>
<<Member functions for class [[GUSIservent]]>>
@

\section{Definition of [[GUSINetDB]]}

<<Definition of class [[GUSINetDB]]>>=
class GUSINetDB {
public:
	<<Constructing instances of [[GUSINetDB]]>>
	<<[[GUSINetDB]] host database>>
	<<[[GUSINetDB]] service database>>
	<<[[GUSINetDB]] protocol database>>
protected:
	GUSINetDB();
	virtual ~GUSINetDB()		{}
	<<Privatissima of [[GUSINetDB]]>>
}; 
@ %def GUSINetDB

[[GUSINetDB]] is a singleton, but usually instantiated by an instance of a 
derived class.
<<Constructing instances of [[GUSINetDB]]>>=
	static GUSINetDB * 	Instance();
@

The public interface of [[GUSINetDB]] consists of three areas. The first set of
calls is concerned with host names and IP numbers.
<<[[GUSINetDB]] host database>>=
virtual hostent *	gethostbyname(const char * name);
virtual hostent *	gethostbyaddr(const void * addr, size_t len, int type);
virtual char *		inet_ntoa(in_addr inaddr);
virtual in_addr_t	inet_addr(const char *address);
virtual long		gethostid();
virtual int			gethostname(char *machname, int buflen);
@

The next set of calls is concerned with TCP and UDP services.
<<[[GUSINetDB]] service database>>=
virtual servent *	getservbyname(const char * name, const char * proto);
virtual servent *	getservbyport(int port, const char * proto);
virtual servent *	getservent();
virtual void		setservent(int stayopen);
virtual void		endservent();
@

Finally, there is a set of calls concerned with protocols.
<<[[GUSINetDB]] protocol database>>=
virtual protoent *	getprotobyname(const char * name);
virtual protoent *	getprotobynumber(int proto);
virtual protoent * 	getprotoent();
virtual void		setprotoent(int stayopen);
virtual void		endprotoent();
@

\section{Definition of [[GUSIServiceDB]]}

[[GUSIServiceDB]] is a singleton, used as a primitive iterator. The semantics of
these iterators conform only very superficially to real iterators:

\begin{itemize}
\item Only a single instance of the iterator is supported.
\item Comparison operators all compare against [[end]], no matter what
arguments are passed.
\end{itemize}
<<Definition of class [[GUSIServiceDB]]>>=
extern "C" void GUSIKillServiceDBData(void * entry);

class GUSIServiceDB {
public:
	static GUSIServiceDB *	Instance();
	<<Iterating over the [[GUSIServiceDB]]>>
protected:
	static GUSIServiceDB *	sInstance;
							GUSIServiceDB()		{}
	virtual 				~GUSIServiceDB()	{}
	
	friend void GUSIKillServiceDBData(void * entry);
	
	<<Internal iterator protocol of [[GUSIServiceDB]]>>
}; 
@ %def GUSIServiceDB

Iterating is accomplished by a public interface conforming to STL iterator
protocols.
<<Iterating over the [[GUSIServiceDB]]>>=
class iterator {
public:
	inline bool 			operator==(const iterator & other);
	inline bool 			operator!=(const iterator & other);
	inline iterator &		operator++();
	inline servent *		operator*();
};
inline static iterator	begin();
inline static iterator	end();
@

This interface does not access any data elements in the iterator, but directly 
calls through to a private interface in the [[GUSIServiceDB]], which explains
the limitations in the iterator implementation.
<<Internal iterator protocol of [[GUSIServiceDB]]>>=
friend class iterator;

class Data {
public:
	Data() : fCurrent(0) {}
	
	servent *	fCurrent;
	GUSIservent	fServent;
};
typedef GUSISpecificData<Data, GUSIKillServiceDBData> SpecificData;
static 	SpecificData sData;

virtual void	Reset() = 0;
virtual void	Next()	= 0;
@

\section{Definition of [[GUSIhostent]] and [[GUSIservent]]}

A [[GUSIhostent]] may need a lot of data, so we allocate the name data
dynamically.
<<Definition of class [[GUSIhostent]]>>=
class GUSIhostent : public hostent {
public:
	GUSIhostent();
	
	void	Alloc(size_t size);

	char *	fAlias[16];
	char *	fAddressList[16];
	char * 	fName;
	size_t	fAlloc;
	char 	fAddrString[16];
};

extern "C" void GUSIKillHostEnt(void * hostent);

@ %def GUSIhostent

A [[GUSIservent]] typically will remain more modest in its needs, so the
data is allocated statically.
<<Definition of class [[GUSIservent]]>>=
class GUSIservent : public servent {
public:
	GUSIservent();
	
	char *	fAlias[8];
	char 	fName[256];	
};
@ %def GUSIservent

\section{Implementation of [[GUSINetDB]]}

[[GUSINetDB]] is a singleton, but typically implemented by an instance
of a subclass (stored into [[fInstance]] by that subclass) rather than the
base class.
<<Privatissima of [[GUSINetDB]]>>=
static GUSINetDB *		sInstance;
<<Member functions for class [[GUSINetDB]]>>=
GUSINetDB * GUSINetDB::sInstance;

GUSINetDB *  GUSINetDB::Instance()
{
	if (!sInstance) {
		GUSISocketDomainRegistry::Instance();
		if (!sInstance)
			sInstance = new GUSINetDB();
	}
	return sInstance;
}
GUSINetDB::GUSINetDB()
{
	GUSIContext::Setup(false);
	
	<<Initialize fields of [[GUSINetDB]]>>
}
@

The host functions are not implemented unless the programmer adds
support for either MacTCP or OpenTransport net database support.
<<Member functions for class [[GUSINetDB]]>>=
hostent * GUSINetDB::gethostbyname(const char *)
{
	return (h_errno = NO_RECOVERY), static_cast<hostent *>(nil);
}
hostent * GUSINetDB::gethostbyaddr(const void *, size_t, int)
{
	return (h_errno = NO_RECOVERY), static_cast<hostent *>(nil);
}
char * GUSINetDB::inet_ntoa(in_addr)
{
	return (h_errno = NO_RECOVERY), static_cast<char *>(nil);
}
in_addr_t GUSINetDB::inet_addr(const char * address)
{
	int a[4];
	if (sscanf(address, "%d.%d.%d.%d", a, a+1, a+2, a+3) != 4)
		return static_cast<in_addr_t>(GUSISetHostError(NO_RECOVERY));
	else if ((a[0] & 0xFFFFFF00) || (a[1] & 0xFFFFFF00) 
	      || (a[2] & 0xFFFFFF00) || (a[3] & 0xFFFFFF00))
		return static_cast<in_addr_t>(GUSISetHostError(NO_RECOVERY));
	else
		return (in_addr_t)((a[0] << 24) | (a[1] << 16) | (a[2] <<  8) | a[3]);
}
long GUSINetDB::gethostid()
{
	return 0;
}
@

Unlike the other functions, [[gethostname]] is defined entirely in terms
of the other functions and thus network independent.
<<Member functions for class [[GUSINetDB]]>>=
int GUSINetDB::gethostname(char *machname, int buflen)
{
	static char * sHostName = nil;
	
	if (!sHostName) {
		in_addr ipaddr;
		if (!(ipaddr.s_addr = static_cast<in_addr_t>(gethostid()))) {
			<<No TCP/IP support, determine host name from chooser>>
		} else {
			<<Translate host IP number to host name>>
		}
	}
	strncpy(machname, sHostName, unsigned(buflen));
	machname[buflen-1] = 0;  /* extra safeguard */

	return 0;
}
@

If there is no TCP/IP support, we still can get the system's idea of what
the Mac is named.
<<No TCP/IP support, determine host name from chooser>>=
Handle 	hostString 	= GetResource('STR ', -16413);
char 	hsState 	= HGetState(hostString);
HLock(hostString);
sHostName = new char[**hostString+1];
memcpy(sHostName, *hostString+1, **hostString);
sHostName[**hostString] = 0;
HSetState(hostString, hsState);
@
		
<<Translate host IP number to host name>>=
hostent * ent	= gethostbyaddr((char *) &ipaddr, 0, 0);
char * name 	= ent ? ent->h_name : inet_ntoa(ipaddr);
sHostName   	= new char[strlen(name)+1];
strcpy(sHostName, name);
@

The service database is implemented in terms of [[GUSIServiceDB]]. Only
[[getservent]] and [[setservent]] accesse [[GUSIServiceDB]] directly, however.
<<Privatissima of [[GUSINetDB]]>>=
bool					fServiceOpen;
bool					fServiceValid;
GUSIServiceDB::iterator	fServiceIter;
<<Initialize fields of [[GUSINetDB]]>>=
fServiceOpen 	= false;
fServiceValid	= false;
<<Member functions for class [[GUSINetDB]]>>=
servent * GUSINetDB::getservent()
{
	if (!fServiceOpen)
		setservent(0);
	else if (!fServiceValid)
		++fServiceIter;
	if (fServiceIter == GUSIServiceDB::end())
		endservent();
	fServiceValid	= false;	// Refetch next time we call
	return *fServiceIter;
}
void GUSINetDB::setservent(int)
{
	fServiceIter 	= GUSIServiceDB::begin();
	fServiceOpen 	= true;
	fServiceValid	= true;	// Don't refetch first time getservent is called
}
void	GUSINetDB::endservent()
{
	fServiceOpen = false;
}
@

[[getservbyname]] and [[getservbyport]] operate in terms of 
[[getservent]].
<<Member functions for class [[GUSINetDB]]>>=
servent * GUSINetDB::getservbyname(const char * name, const char * proto)
{
	servent * ent;
	
	for (setservent(0); ent = getservent(); ) {
		if (!strcmp(name, ent->s_name))
			goto haveName;
		for (char ** al = ent->s_aliases; *al; ++al)
			if (!strcmp(name, *al))
				goto haveName;
		continue;
haveName:
		if (!proto || !strcmp(proto, ent->s_proto))
			break;
	}
	return ent;
}

servent * GUSINetDB::getservbyport(int port, const char * proto)
{
	servent * ent;
	
	for (setservent(0); ent = getservent(); )
		if (port == ent->s_port && (!proto || !strcmp(proto, ent->s_proto)))
			break;
	
	return ent;
}
@

The protocol database is similar, in principle, to the service database, but it
lends itself naturally to a much simpler implementation.
<<Privatissima of [[GUSINetDB]]>>=
int				fNextProtocol;
static protoent	sProtocols[2];
<<Initialize fields of [[GUSINetDB]]>>=
fNextProtocol = 0;
<<Member functions for class [[GUSINetDB]]>>=
protoent GUSINetDB::sProtocols[] = {
	{ "udp", {NULL}, IPPROTO_UDP},
	{ "tcp", {NULL}, IPPROTO_TCP}
};
@

Under these circumstances, the iterator functions reduce to triviality.
<<Member functions for class [[GUSINetDB]]>>=
protoent * GUSINetDB::getprotoent()
{
	fNextProtocol = !fNextProtocol;
	return sProtocols+!fNextProtocol;
}
void GUSINetDB::setprotoent(int)
{
	fNextProtocol  = 0;
}
void GUSINetDB::endprotoent()
{
	fNextProtocol  = 0;
}
@

<<Member functions for class [[GUSINetDB]]>>=
protoent * GUSINetDB::getprotobyname(const char * name)
{
	for (int i = 0; i<2; ++i)
		if (!strcmp(name, sProtocols[i].p_name))
			return sProtocols+i;
	return static_cast<protoent *>(nil);
}
protoent * GUSINetDB::getprotobynumber(int proto)
{
	for (int i = 0; i<2; ++i)
		if (proto == sProtocols[i].p_proto)
			return sProtocols+i;
	return static_cast<protoent *>(nil);
}
@

\section{Implementation of [[GUSIServiceDB]]}

[[GUSIServiceDB]] is a singleton which is always instantiated by an instance
of a derived class. The derived classes [[GUSIFileServiceDB]] and 
[[GUSIBuiltinServiceDB]] are defined here, but others are possible as well.
<<Member functions for class [[GUSIServiceDB]]>>=
<<Definition of class [[GUSIFileServiceDB]]>>
<<Definition of class [[GUSIBuiltinServiceDB]]>>

<<Member functions for class [[GUSIFileServiceDB]]>>
<<Member functions for class [[GUSIBuiltinServiceDB]]>>
@

By default, we try to construct a [[GUSIFileServiceDB]] and fall back to
the [[GUSIBuiltinServiceDB]] if that fails.
<<Member functions for class [[GUSIServiceDB]]>>=
GUSIServiceDB::SpecificData	GUSIServiceDB::sData;

void GUSIKillServiceDBData(void * data)
{
	delete reinterpret_cast<GUSIServiceDB::Data *>(data);
}

GUSIServiceDB * GUSIServiceDB::sInstance;

GUSIServiceDB * GUSIServiceDB::Instance()
{
	if (!sInstance) 
		if (!(sInstance = GUSIFileServiceDB::Instance()))
			sInstance = GUSIBuiltinServiceDB::Instance();
	return sInstance;
}
@

Iterators can be defined without regard to the implementation of the
[[GUSIServiceDB]] currently used.
<<Inline member functions for class [[GUSIServiceDB]]>>=
GUSIServiceDB::iterator	GUSIServiceDB::begin()
{
	Instance()->Reset();
	Instance()->Next();
	
	return iterator();
}
GUSIServiceDB::iterator	GUSIServiceDB::end()
{
	return iterator();
}
bool GUSIServiceDB::iterator::operator==(const GUSIServiceDB::iterator &)
{
	return !GUSIServiceDB::sData->fCurrent;
}
bool GUSIServiceDB::iterator::operator!=(const GUSIServiceDB::iterator &)
{
	return GUSIServiceDB::sData->fCurrent 
		== static_cast<servent *>(nil);
}
GUSIServiceDB::iterator & GUSIServiceDB::iterator::operator++()
{
	GUSIServiceDB::Instance()->Next();
	return *this;
}
servent * GUSIServiceDB::iterator::operator*()
{
	return GUSIServiceDB::sData->fCurrent;
}
@

[[GUSIBuiltinServiceDB]] is the most simple implementation of the service
database, based on a compiled-in table of the most important services.
<<Definition of class [[GUSIBuiltinServiceDB]]>>=

extern "C" void GUSIKillBuiltinServiceDBEntry(void * entry);

class GUSIBuiltinServiceDB : public GUSIServiceDB {
public:
	static GUSIBuiltinServiceDB * Instance() { return new GUSIBuiltinServiceDB; }
protected:
	friend void GUSIKillBuiltinServiceDBEntry(void * entry);
	
	struct Entry {
		Entry() : fValue(0) {}
		
		int	fValue;
	};
	typedef GUSISpecificData<Entry, GUSIKillBuiltinServiceDBEntry>	SpecificEntry;
	static SpecificEntry sEntry;
	
	virtual void	Reset();
	virtual void 	Next();
	
	static servent	sServices[];
};
@ %def GUSIBuiltinServiceDB

<<Member functions for class [[GUSIBuiltinServiceDB]]>>=
GUSIBuiltinServiceDB::SpecificEntry	GUSIBuiltinServiceDB::sEntry;

void GUSIKillBuiltinServiceDBEntry(void * entry)
{
	delete reinterpret_cast<GUSIBuiltinServiceDB::Entry *>(entry);
}

static char *	sNoAliases[1] = {NULL};

servent GUSIBuiltinServiceDB::sServices[] =
{
	{ "echo", 		sNoAliases,   7, "udp"},
	{ "discard", 	sNoAliases,   9, "udp"},
	{ "time", 		sNoAliases,  37, "udp"},
	{ "domain", 	sNoAliases,  53, "udp"},
	{ "sunrpc", 	sNoAliases, 111, "udp"},
	{ "tftp", 		sNoAliases,  69, "udp"},
	{ "biff", 		sNoAliases, 512, "udp"},
	{ "who", 		sNoAliases, 513, "udp"},
	{ "talk", 		sNoAliases, 517, "udp"},
	
	{ "ftp-data", 	sNoAliases,  20, "tcp"},
	{ "ftp", 		sNoAliases,  21, "tcp"},
    { "ssh",        sNoAliases,  22, "tcp"},
	{ "telnet", 	sNoAliases,  23, "tcp"},
	{ "smtp", 		sNoAliases,  25, "tcp"},
	{ "time", 		sNoAliases,  37, "tcp"},
	{ "whois", 		sNoAliases,  43, "tcp"},
	{ "domain", 	sNoAliases,  53, "tcp"},
	{ "hostnames", 	sNoAliases, 101, "tcp"},
	{ "nntp", 		sNoAliases, 119, "tcp"},
	{ "finger", 	sNoAliases,  79, "tcp"},
	{ "http", 		sNoAliases,  80, "tcp"},
	{ "ntp", 		sNoAliases, 123, "tcp"},
	{ "uucp", 		sNoAliases, 540, "tcp"},
	{ NULL, NULL, -1, NULL}
};
@

<<Member functions for class [[GUSIBuiltinServiceDB]]>>=
void GUSIBuiltinServiceDB::Reset()
{
	sEntry->fValue = 0;
}
void GUSIBuiltinServiceDB::Next()
{
	if (!sServices[sEntry->fValue].s_name)
		sData->fCurrent = static_cast<servent *>(nil);
	else
		sData->fCurrent = sServices + sEntry->fValue++;
}
@

[[GUSIFileServiceDB]] is the traditional implementation, based on reading a file
from disk. This class is not $100\%$ thread safe: The normal functions are OK, but
[[getservent]] will not be safe.
<<Definition of class [[GUSIFileServiceDB]]>>=
class GUSIFileServiceDB : public GUSIServiceDB {
public:
	static GUSIFileServiceDB * Instance();
protected:
	FILE *			fFile;
	pthread_mutex_t	fLock;
	
	GUSIFileServiceDB(FILE * file) 
		: fFile(file), fLock(0) { }
	
	virtual void	Reset();
	virtual void 	Next();
};
@ %def GUSIFileServiceDB

Constructing a [[GUSIFileServiceDB]] can only succeed if the services file exists.
<<Member functions for class [[GUSIFileServiceDB]]>>=
GUSIFileServiceDB * GUSIFileServiceDB::Instance()
{
	GUSIFileSpec services(kPreferencesFolderType, kOnSystemDisk);
	
	if (services.Error())
		return static_cast<GUSIFileServiceDB *>(nil);
	
	services.SetName("\p/etc/services");
	
	FILE * f = fopen(services.FullPath(), "r");
	
	return f ? new GUSIFileServiceDB(f) : static_cast<GUSIFileServiceDB *>(nil);
}
@

[[Reset]] simply rewinds the file.
<<Member functions for class [[GUSIFileServiceDB]]>>=
void GUSIFileServiceDB::Reset()
{
	rewind(fFile);
}
@

[[Next]] has to parse the lines of the file.
<<Member functions for class [[GUSIFileServiceDB]]>>=
void GUSIFileServiceDB::Next()
{
	GUSIservent & service = sData->fServent;

	pthread_mutex_lock(&fLock);
	sData->fCurrent = static_cast<servent *>(nil);
	while (fgets(service.fName, 128, fFile)) {
		char *	p;
		if (p = strpbrk(service.fName, "#\n\r")) // Line terminated at newline or '#'
			*p = 0;
		if (!(service.s_name = strtok(service.fName, " \t"))
		 || !(p = strtok(NULL, " \t"))
		 || !(service.s_proto = strpbrk(p, "/,"))
		)
			continue;
		
		*service.s_proto++ 	= 0;
		service.s_port 		= atoi(p);
	
		int aliascount;
		for (aliascount = 0; aliascount < 15; ) 
			if (!(service.s_aliases[aliascount++] = strtok(NULL, " \t")))
				break;
		service.s_aliases[aliascount] = NULL;
		sData->fCurrent = &service;
		
		break;
	}
	pthread_mutex_unlock(&fLock);
}
@

\section{Implementation of [[GUSIhostent]] and [[GUSIservent]]}

The wrapper classes are rather simple. Note that a [[GUSIhostent]] never
shrinks.
<<Member functions for class [[GUSIhostent]]>>=
GUSIhostent::GUSIhostent()
 : fName(nil), fAlloc(0)
{
	h_aliases 	= fAlias;
	h_addr_list	= fAddressList;
}
void GUSIhostent::Alloc(size_t size)
{
	if (size > fAlloc) {
		if (fName)
			delete[] fName;
		h_name = fName = new char[fAlloc = size];
	}
}
void GUSIKillHostEnt(void * hostent)
{
	delete reinterpret_cast<GUSIhostent *>(hostent);
}
@

<<Member functions for class [[GUSIservent]]>>=
GUSIservent::GUSIservent()
{
	s_aliases	= fAlias;
}
@
