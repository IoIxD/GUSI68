%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Project	:	GUSI				-	Grand Unified Socket Interface
% File		:	GUSIOTNetDB.nw		-	Open Transport DNS lookups
% Author	:	Matthias Neeracher
% Language	:	C++
% 
% $Log: GUSIOTNetDB.nw,v $
% Revision 1.13  2002/09/03 05:13:56  neeri
% Reengineered signal handling to properly handle handlers that longjmp() [GUSI Bug #564063]
%
% Revision 1.12  2002/01/07 05:56:20  neeri
% Compatibility fixes for CodeWarrior Pro 7
%
% Revision 1.11  2001/05/09 08:26:32  neeri
% Hostname needs to return a name, not a dotted decimal tuple (MacPerl Bug #421705)
%
% Revision 1.10  2001/04/01 07:42:27  neeri
% Reopen on kOTProviderIsClosed
%
% Revision 1.9  2001/03/09 09:24:16  neeri
% FIxed handling of network configuration changes
%
% Revision 1.8  2000/06/12 04:20:59  neeri
% Introduce GUSI_*printf
%
% Revision 1.7  2000/05/23 07:11:45  neeri
% Improve formatting, handle failed lookups correctly
%
% Revision 1.6  2000/03/06 06:10:01  neeri
% Reorganize Yield()
%
% Revision 1.5  1999/12/14 06:27:47  neeri
% initialize OT before opening resolver
%
% Revision 1.4  1999/08/26 05:45:06  neeri
% Fixes for literate edition of source code
%
% Revision 1.3  1999/06/30 07:42:06  neeri
% Getting ready to release 2.0b3
%
% Revision 1.2  1999/05/30 03:09:31  neeri
% Added support for MPW compilers
%
% Revision 1.1  1999/03/17 09:05:10  neeri
% Added GUSITimer, expanded docs
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\chapter{IP Name Lookup in Open Transport}

<<GUSIOTNetDB.h>>=
#ifndef _GUSIOTNetDB_
#define _GUSIOTNetDB_

#ifdef GUSI_INTERNAL
#include "GUSIOpenTransport.h"
#include "GUSINetDB.h"
#include "GUSIContext.h"

<<Name dropping for file GUSIOTNetDB>>

<<Definition of class [[GUSIOTNetDB]]>>

#endif /* GUSI_INTERNAL */

#endif /* _GUSIOTNetDB_ */
@

<<GUSIOTNetDB.cp>>=
#include "GUSIInternal.h"
#include "GUSIOTNetDB.h"
#include "GUSIOTInet.h"

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include <OpenTptInternet.h>

<<Asynchronous notifier function for [[GUSIOTNetDB]]>>
<<Member functions for class [[GUSIOTNetDB]]>>
@

\section{Definition of [[GUSIOTNetDB]]}

We don't want to open the Open Transport headers files in our public header, but we
need [[InetSvcRef]].
<<Name dropping for file GUSIOTNetDB>>=
class	TInternetServices;
typedef TInternetServices*	InetSvcRef;
@

<<Definition of class [[GUSIOTNetDB]]>>=
class GUSIOTNetDB : public GUSINetDB {
public:
	static void	Instantiate();
	bool Resolver();
	
	<<Overridden member functions for [[GUSIOTNetDB]]>>
private:
	GUSISpecificData<GUSIhostent, GUSIKillHostEnt>	fHost;
	<<Privatissima of [[GUSIOTNetDB]]>>
};
@ %def GUSIOTNetDB

\section{Implementation of [[GUSIOTNetDB]]}

<<Privatissima of [[GUSIOTNetDB]]>>=
GUSIOTNetDB();
<<Member functions for class [[GUSIOTNetDB]]>>=
GUSIOTNetDB::GUSIOTNetDB()
{
	<<Initialize fields of [[GUSIOTNetDB]]>>
}
@

The [[GUSIOTNetDB]] notifier operates similarly to the [[GUSIOTSocket]] notifier,
but it has to get the context to wake up somehow from its parameters.
<<Privatissima of [[GUSIOTNetDB]]>>=
uint16_t		fEvent;
uint32_t		fCompletion;
OSStatus		fAsyncError;
InetSvcRef		fSvc;
GUSIContext *	fCreationContext;
friend pascal void GUSIOTNetDBNotify(GUSIOTNetDB *, OTEventCode, OTResult, void *);
<<Initialize fields of [[GUSIOTNetDB]]>>=
fEvent 				= 0;
fCompletion			= 0;
fAsyncError 		= 0;
fSvc				= 0;
fCreationContext	= 0;
<<Asynchronous notifier function for [[GUSIOTNetDB]]>>=
inline uint32_t CompleteMask(OTEventCode code)	
{ 	
	return 1 << (code & 0x1F); 
}

pascal void GUSIOTNetDBNotify(
	GUSIOTNetDB * netdb, OTEventCode code, OTResult result, void *cookie)
{
	GUSI_MESSAGE(("GUSIOTNetDBNotify %08x %d\n", code, result));
	GUSIContext *	context = netdb->fCreationContext;
	
	switch (code & 0x7F000000L) {
	case 0:
		netdb->fEvent |= code;
		result = 0;
		break;
	case kPRIVATEEVENT:
	case kCOMPLETEEVENT:
		if (!(code & 0x00FFFFE0))
			netdb->fCompletion |= CompleteMask(code);
		switch (code) {
		case T_OPENCOMPLETE:
			netdb->fSvc = static_cast<InetSvcRef>(cookie);
			break;
		case T_DNRSTRINGTOADDRCOMPLETE:
		case T_DNRADDRTONAMECOMPLETE:
			context = static_cast<GUSIContext **>(cookie)[-1];
			break;
		}
		break;
	default:
		switch (code) {
		case kOTProviderWillClose:
		case kOTProviderIsClosed:
			netdb->fCreationContext = nil;	// Close & reopen
			break;
		default: 
			result = 0;
			break;
		}
		break;
	}
	if (result)
		netdb->fAsyncError = result;
	context->Wakeup();
}
@

The Open Transport DNR code is installed by calling [[Instantiate]], which initializes
the singleton instance of [[GUSINetDB]].
<<Member functions for class [[GUSIOTNetDB]]>>=
void GUSIOTNetDB::Instantiate()
{
	if (!sInstance)
		sInstance = new GUSIOTNetDB;
}
@

<<Member functions for class [[GUSIOTNetDB]]>>=
bool GUSIOTNetDB::Resolver()
{
	if (!fCreationContext) {
		if (fSvc) {
			OTCloseProvider(fSvc);
			fSvc = nil;
		}
		fCreationContext = GUSIContext::Current();
		if (!GUSIOTFactory::Initialize())
			return false;
		fAsyncError = 0;
		OSStatus syncError = OTAsyncOpenInternetServices(
			kDefaultInternetServicesPath, 
			0,
			reinterpret_cast<OTNotifyProcPtr>(GUSIOTNetDBNotify),
			this);
		if (!syncError)
			while (!fAsyncError && !(fCompletion & CompleteMask(T_OPENCOMPLETE)))
				GUSIContext::Yield(kGUSIBlock);
		GUSIContext::Raise();
	}
	return fSvc != 0;
}
@

Naturally, Open Transport keeps its host data in different structures than the socket
standard.
<<Member functions for class [[GUSIOTNetDB]]>>=
static void CopyHost(InetHostInfo & otHost, GUSIhostent & unixHost)
{
	size_t len = strlen(otHost.name);
	len = (len+4) & ~3;
	
	unixHost.Alloc(len+kMaxHostAddrs*4);
	strcpy(unixHost.h_name, otHost.name);
	unixHost.h_aliases[0] 	= NULL;			// Aliases not supported
	unixHost.h_addrtype		= AF_INET;	
	unixHost.h_length		= 4;
	
	int addrs = 0;
	for (int i=0; i<kMaxHostAddrs && otHost.addrs[addrs]!=0; ++i, ++addrs) {
		unixHost.h_addr_list[addrs] = unixHost.fName + len;
		len += 4;
		memcpy(unixHost.h_addr_list[addrs], &otHost.addrs[addrs], 4);
	}
	unixHost.h_addr_list[addrs] = NULL;
}
@

<<Overridden member functions for [[GUSIOTNetDB]]>>=
virtual hostent * gethostbyname(const char * name);
<<Member functions for class [[GUSIOTNetDB]]>>=
hostent * GUSIOTNetDB::gethostbyname(const char * name)
{
	<<Open Open Transport DNR or fail lookup>>
	if (!strcmp(name, "localhost")) {
		long ipaddr = gethostid();
		if (ipaddr)
			return gethostbyaddr((char *) &ipaddr, sizeof(in_addr), AF_INET);
		return GUSISetHostError(HOST_NOT_FOUND), static_cast<hostent *>(nil);
	}
	<<Declare and initialize [[otHost]] and [[unixHost]]>>
	fCompletion &= ~CompleteMask(T_DNRSTRINGTOADDRCOMPLETE);
	fAsyncError = 0;
	OSStatus syncError = OTInetStringToAddress(fSvc, const_cast<char *>(name), &otHost.fInfo);
	if (syncError)
		return GUSISetHostError(NO_RECOVERY), static_cast<hostent *>(nil);
	while (!fAsyncError && !(fCompletion & CompleteMask(T_DNRSTRINGTOADDRCOMPLETE)))
		GUSIContext::Yield(kGUSIBlock);
	GUSIContext::Raise();
	if (fAsyncError)
		return GUSISetHostError(NO_RECOVERY), static_cast<hostent *>(nil);

	CopyHost(otHost.fInfo, unixHost);
	
	return &unixHost;
}
<<Open Open Transport DNR or fail lookup>>=
if (!Resolver())
	return GUSISetHostError(NO_RECOVERY), static_cast<hostent *>(nil);
<<Declare and initialize [[otHost]] and [[unixHost]]>>=
struct	{
	GUSIContext *	fContext;
	InetHostInfo	fInfo;
}				otHost;
GUSIhostent &	unixHost 	= *fHost;
otHost.fContext 			= GUSIContext::Current();
@

<<Overridden member functions for [[GUSIOTNetDB]]>>=
virtual hostent * gethostbyaddr(const void * addr, size_t len, int type);
<<Member functions for class [[GUSIOTNetDB]]>>=
hostent * GUSIOTNetDB::gethostbyaddr(const void * addrP, size_t len, int)
{
	<<Open Open Transport DNR or fail lookup>>
	<<Declare and initialize [[otHost]] and [[unixHost]]>>

	InetHost addr = *(InetHost *)addrP;
	if (addr == 0x7F000001)
		addr = static_cast<InetHost>(gethostid());
	
	fCompletion &= ~CompleteMask(T_DNRADDRTONAMECOMPLETE);
	fAsyncError = 0;
	OSStatus syncError = OTInetAddressToName(fSvc, addr, otHost.fInfo.name);
	if (syncError)
		return GUSISetHostError(NO_RECOVERY), static_cast<hostent *>(nil);
	while (!fAsyncError && !(fCompletion & CompleteMask(T_DNRADDRTONAMECOMPLETE)))
		GUSIContext::Yield(kGUSIBlock);
	GUSIContext::Raise();
	if (fAsyncError)
		return GUSISetHostError(NO_RECOVERY), static_cast<hostent *>(nil);

	memset(otHost.fInfo.addrs, 0, kMaxHostAddrs*4);
	otHost.fInfo.addrs[0] = addr;
	<<Strip extra period from name>>
	CopyHost(otHost.fInfo, unixHost);
	
	return &unixHost;
}
@

Apparently, Open Transport likes appaending an extra [['.']] to the domain name.
<<Strip extra period from name>>=
len = strlen(otHost.fInfo.name);
if (otHost.fInfo.name[len-1] == '.')
	otHost.fInfo.name[len-1] = 0;
@

<<Overridden member functions for [[GUSIOTNetDB]]>>=
virtual char * inet_ntoa(in_addr inaddr);
<<Member functions for class [[GUSIOTNetDB]]>>=
char * GUSIOTNetDB::inet_ntoa(in_addr inaddr)
{
	GUSIhostent &	unixHost = *fHost;
	GUSI_sprintf(unixHost.fAddrString, "%d.%d.%d.%d", 
		(inaddr.s_addr >> 24) & 0xFF,
		(inaddr.s_addr >> 16) & 0xFF,
		(inaddr.s_addr >> 8) & 0xFF,
		inaddr.s_addr & 0xFF);
	return unixHost.fAddrString;
}
@

<<Overridden member functions for [[GUSIOTNetDB]]>>=
virtual long gethostid();
<<Member functions for class [[GUSIOTNetDB]]>>=
long GUSIOTNetDB::gethostid()
{
	if (!Resolver())
		return GUSISetHostError(NO_RECOVERY), 0;
	InetInterfaceInfo	info;
	OTInetGetInterfaceInfo(&info, kDefaultInetInterface);
	
	return static_cast<long>(info.fAddress);
}
@

