%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Project	:	GUSI				-	Grand Unified Socket Interface
% File		:	GUSIMSL.nw			-	Interface to the MSL
% Author	:	Matthias Neeracher
% Language	:	C++
% 
% $Log: GUSIMSL.nw,v $
% Revision 1.9  2002/01/07 05:56:20  neeri
% Compatibility fixes for CodeWarrior Pro 7
%
% Revision 1.8  2000/10/29 19:17:04  neeri
% Accommodate MSL's non-compliant fopen signature
%
% Revision 1.7  2000/10/16 04:34:22  neeri
% Releasing 2.1.2
%
% Revision 1.6  2000/05/23 07:03:25  neeri
% Improve formatting
%
% Revision 1.5  1999/08/26 05:45:03  neeri
% Fixes for literate edition of source code
%
% Revision 1.4  1999/08/02 07:02:43  neeri
% Support for asynchronous errors and other socket options
%
% Revision 1.3  1999/04/14 04:20:21  neeri
% Override console hooks
%
% Revision 1.2  1999/04/10 04:53:58  neeri
% Use simpler internal MSL routines
%
% Revision 1.1  1998/08/01 21:32:07  neeri
% About ready for 2.0a1
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\chapter{The Interface to the MSL}

This section interfaces GUSI to the Metrowerks Standard Library (MSL)
by reimplementing various internal MSL routines. Consequently, some of 
the code used here is borrowed from the MSL code itself. The routines 
here are in three different categories:

\begin{itemize}
\item Overrides of MSL functions (all internal, as it happens).
\item Implementations of ANSI library specific public GUSI functions like
	[[fdopen]].
\item Implementations of ANSI library specific internal GUSI functions.
\end{itemize}

<<GUSIMSL.h>>=
#ifndef _GUSIMSL_
#define _GUSIMSL_

#endif /* _GUSIMSL_ */
@

<<GUSIMSL.cp>>=
#include "GUSIInternal.h"
#include "GUSIMSL.h"
#include "GUSIDescriptor.h"

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <algorithm>

GUSI_USING_STD_NAMESPACE

<<Prototypes for internal MSL variables>>
extern "C" {
<<Prototypes for internal MSL functions>>
<<Prototypes for MSL override functions>>
}

<<Implementation of MSL override functions>>
<<Implementation of ANSI library specific public GUSI functions>>
<<Implementation of ANSI library specific internal GUSI functions>>
@

\section{Implementation of MSL override functions}

All opens from the ANSI C and C++ libraries eventually call [[__open_file]], so
that's one of our most important override candidates. We translate the file mode
and call [[open]].
<<Prototypes for MSL override functions>>=
int __open_file(const char * name, __file_modes mode, __file_handle * handle);
<<Implementation of MSL override functions>>=
int __open_file(const char * name, __file_modes mode, __file_handle * handle)
{
	int	fd;
	int	posixmode;
	
	<<Translate [[mode]] to [[posixmode]]>>
	
	fd = open(name, posixmode);
	
	if (fd == -1)
		return __io_error;
	
	*handle = (unsigned) fd;
	
	return __no_io_error;
}
@

Translation of the constants is pretty obvious.
<<Translate [[mode]] to [[posixmode]]>>=
switch (mode.open_mode) {
case __must_exist:
	posixmode = 0;
	break;
case __create_if_necessary:
	posixmode = O_CREAT;
	break;
case __create_or_truncate:
	posixmode = O_CREAT | O_TRUNC;
	break;
}

switch (mode.io_mode) {
case __read:
	posixmode |= O_RDONLY;
	break;
case __write:
	posixmode |= O_WRONLY;
	break;
case __read_write:
	posixmode |= O_RDWR;
	break;
case __write | __append:
	posixmode |= O_WRONLY | O_APPEND;
	break;
case __read_write | __append:
	posixmode |= O_RDWR | O_APPEND;
	break;
}
@

[[__open_temp_file]] is used to open files that get deleted after they are closed.
We simply use the underlying GUSI support for the POSIXish [[open() / unlink]]
idiom.
<<Prototypes for MSL override functions>>=
int __open_temp_file(__file_handle * handle);
<<Prototypes for internal MSL functions>>=
void __temp_file_name(char * name_str, void * fsspec);
<<Prototypes for internal MSL variables>>=
extern __file_modes __temp_file_mode;
<<Implementation of MSL override functions>>=
int __open_temp_file(__file_handle * handle)
{
	char	temp_name[L_tmpnam];
	FSSpec	spec;
	int		ioresult;
	
	__temp_file_name(temp_name, &spec);

	ioresult = __open_file(temp_name, __temp_file_mode, handle);
	
	if (ioresult == __no_io_error)
	{
		unlink(temp_name);
	}
	
	return(ioresult);
}
@

I/O operations in MSL lead to calls to [[__read_file]], [[__write_file]],
[[__position_file]], and [[__close_file]], so we'll reimplement those. 
<<Prototypes for MSL override functions>>=
int __read_file(
	__file_handle handle, unsigned char * buffer, size_t * count, __idle_proc idle_proc);
<<Implementation of MSL override functions>>=
int __read_file(
	__file_handle handle, unsigned char * buffer, size_t * count, __idle_proc)
{
	int result = read((int) handle, (char *) buffer, (int) *count);
	
	if (result < 0) {
		*count = 0;
		
		return __io_error;
	} else {
		*count = result;
		
		return result ? __no_io_error : __io_EOF;
	}
}
@

We treat the console variations almost identically to their file counterparts,
except that we have to try to guess the correct handle.
<<Prototypes for MSL override functions>>=
int __read_console(
	__file_handle handle, unsigned char * buffer, size_t * count, __idle_proc idle_proc);
<<Implementation of MSL override functions>>=
int __read_console(
	__file_handle handle, unsigned char * buffer, size_t * count, __idle_proc idle_proc)
{
	return __read_file(handle, buffer, count, idle_proc);
}
@

<<Prototypes for MSL override functions>>=
int __write_file(
	__file_handle handle, unsigned char * buffer, size_t * count, __idle_proc idle_proc);
<<Implementation of MSL override functions>>=
int __write_file(
	__file_handle handle, unsigned char * buffer, size_t * count, __idle_proc)
{
	int result = write((int) handle, (char *) buffer, (int) *count);
	
	if (result < 0) {
		*count = 0;
		
		return __io_error;
	} else {
		*count = result;
		
		return __no_io_error;
	}
}
@

<<Prototypes for MSL override functions>>=
int __write_console(
	__file_handle handle, unsigned char * buffer, size_t * count, __idle_proc idle_proc);
<<Implementation of MSL override functions>>=
static __file_handle GuessHandle(__file_handle handle, unsigned char * buffer)
{
	if (handle)
		return handle;
	if (buffer > stderr->buffer && (buffer - stderr->buffer) < stderr->buffer_size)
		return 2;
	return 1;
}

int __write_console(
	__file_handle handle, unsigned char * buffer, size_t * count, __idle_proc idle_proc)
{
	return __write_file(GuessHandle(handle, buffer), buffer, count, idle_proc);
}
@

The only one of these presenting us with some subtlety is [[__position_file]].
Unless we catch the case of positioning at a place where the position already is,
MSL will be unable to [[fdopen]] any sockets.
<<Prototypes for MSL override functions>>=
int __position_file(
	__file_handle handle, unsigned long * position, int mode, __idle_proc idle_proc);
<<Implementation of MSL override functions>>=
int __position_file(
	__file_handle handle, unsigned long * position, int mode, __idle_proc)
{
	long result = lseek((int) handle, *position, mode);
	
	if (result < 0)
		if (errno == ESPIPE && !*position && mode != SEEK_END)
			*position = 0;
		else
			return __io_error;
	else
		*position = result;
	
	return __no_io_error;
}
@

<<Prototypes for MSL override functions>>=
int __close_file(__file_handle handle);
<<Implementation of MSL override functions>>=
int __close_file(__file_handle handle)
{
	return close((int) handle) < 0 ? __io_error : __no_io_error;
}
@

[[__close_console]] is an undecidable function unless you build with MPW 
MSL libraries.
<<Prototypes for MSL override functions>>=
int __close_console(__file_handle handle);
<<Implementation of MSL override functions>>=
int __close_console(__file_handle handle)
{
	return __close_file(handle);
}
@

\section{Implementation of ANSI library specific public GUSI functions}

[[fdopen]] is an operation inherently tied to the ANSI library used. The implementation
of fdopen in MSL changed from CodeWarrior Pro 5 to 6, and again to 7.
<<Prototypes for internal MSL functions>>=
FILE * __find_unopened_file();
// __handle_reopen is declared in <stdio.h>
<<Implementation of ANSI library specific public GUSI functions>>=
#if __MSL__ >= 0x6000
#define fdopen _fdopen
#endif
#if __MSL__ >= 0x7000
#define FDOPEN_TYPE_CONST const
#else
#define FDOPEN_TYPE_CONST 
#endif
FILE * fdopen(int fildes, FDOPEN_TYPE_CONST char *type)
{
	FILE			*str;

	if (!(str = __find_unopened_file()))
		return(0);
	
	return(__handle_reopen(fildes, type, str));
}
@

\section{Implementation of ANSI library specific internal GUSI functions}

While there is a function [[__close_all]], it turns out that calling it is
problematic, at least under CodeWarrior Pro 4, because it may fail 
catastrophically upon being called a second time.
<<Prototypes for internal MSL functions>>=
void __flush_all(void);
<<Implementation of ANSI library specific internal GUSI functions>>=
void GUSIStdioClose() { 				 	 	}
void GUSIStdioFlush() { __flush_all(); 			}
@

<<Implementation of ANSI library specific internal GUSI functions>>=
static void MSLSetupStdio(int fd, FILE * f)
{
	f->handle 			= fd;
	f->position_proc	= __position_file;
	f->read_proc 		= __read_file;
	f->write_proc 		= __write_file;
	f->close_proc 		= __close_file;
}

void GUSISetupConsoleStdio()
{
	MSLSetupStdio(0, stdin);
	MSLSetupStdio(1, stdout);
	MSLSetupStdio(2, stderr);
}
@ 

