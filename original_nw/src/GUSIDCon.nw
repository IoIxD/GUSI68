%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Project	:	GUSI				-	Grand Unified Socket Interface
% File		:	GUSIDCon.nw			-	DCon interface
% Author	:	Matthias Neeracher
% Language	:	C++
% 
% $Log: GUSIDCon.nw,v $
% Revision 1.4  2000/03/06 06:03:30  neeri
% Check device families for file paths
%
% Revision 1.3  1999/08/26 05:45:00  neeri
% Fixes for literate edition of source code
%
% Revision 1.2  1999/05/29 06:26:41  neeri
% Fixed header guards
%
% Revision 1.1  1999/03/17 09:05:06  neeri
% Added GUSITimer, expanded docs
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\chapter{DCon interface}

A [[GUSIDConSocket]]Êimplements an interface to DCon, Cache Computing's 
debugging console. For more information about DCon, see
\href{http://www.cache-computing.com/products/dcon/}{Cache Computing's site} 
at \verb|http://www.cache-computing.com/products/dcon/|.

All instances of [[GUSIDConSocket]] are created by the [[GUSIDConDevice]] 
singleton, so
there is no point in exporting the class itself.
<<GUSIDCon.h>>=
#ifndef _GUSIDCon_
#define _GUSIDCon_

#ifdef GUSI_INTERNAL

#include "GUSIDevice.h"

<<Definition of class [[GUSIDConDevice]]>>

<<Inline member functions for class [[GUSIDConDevice]]>>

#endif /* GUSI_INTERNAL */

#endif /* _GUSIDCon_ */
@

<<GUSIDCon.cp>>=
#include "GUSIInternal.h"
#include "GUSIDCon.h"
#include "GUSIBasics.h"
#include "GUSIDiag.h"

#include <fcntl.h>
#include <stddef.h>

#include <DCon.h>

<<Definition of class [[GUSIDConSocket]]>>
<<Member functions for class [[GUSIDConDevice]]>>
<<Member functions for class [[GUSIDConSocket]]>>
@

\section{Definition of [[GUSIDConDevice]]}

[[GUSIDConDevice]] is a singleton subclass of [[GUSIDevice]].
<<Definition of class [[GUSIDConDevice]]>>=
class GUSIDConDevice : public GUSIDevice {
public:
	static GUSIDConDevice *	Instance();
	virtual bool	Want(GUSIFileToken & file);
	virtual GUSISocket * open(GUSIFileToken & file, int flags);
protected:
	GUSIDConDevice()				{}
	static GUSIDConDevice *	sInstance;
};
@ %def GUSIDConDevice GUSIDConDevice::Want GUSIDConDevice::open GUSIDConDevice::sInstance

\section{Definition of [[GUSIDConSocket]]}

A [[GUSIDConSocket]] writes to the console or to a file.
<<Definition of class [[GUSIDConSocket]]>>=
class GUSIDConSocket : 
	public GUSISocket
{
	char *	fLog;
public:
	GUSIDConSocket(const char * log);
	~GUSIDConSocket();
	<<Overridden member functions for [[GUSIDConSocket]]>>
};
@ %def GUSIDConSocket

\section{Implementation of [[GUSIDConDevice]]}

You can use [[GUSIDConSocket]]s directly from C++, but the usual way to use them
is to call [[GUSIwithDConSockets]] to have [["Dev:DCon"]] and [["Dev:DCon:xxx"]]
mapped to them.
<<Member functions for class [[GUSIDConDevice]]>>=
extern "C" void GUSIwithDConSockets()
{
	GUSIDeviceRegistry::Instance()->AddDevice(GUSIDConDevice::Instance());
}
@

<<Member functions for class [[GUSIDConDevice]]>>=
GUSIDConDevice * GUSIDConDevice::sInstance = nil;
<<Inline member functions for class [[GUSIDConDevice]]>>=
inline GUSIDConDevice * GUSIDConDevice::Instance()
{
	if (!sInstance)
		sInstance = new GUSIDConDevice;
	return sInstance;
}
@

[[GUSIDConDevice]] will handle only the open request.
<<Member functions for class [[GUSIDConDevice]]>>=
bool GUSIDConDevice::Want(GUSIFileToken & file)
{
	if (!file.IsDevice())
		return false;
	
	const char * path = file.Path();
	
	return file.WhichRequest() == GUSIFileToken::kWillOpen
	 &&	file.StrFragEqual(path+4, "dcon")
	 && (!path[8] || (path[8] == ':' && path[9]));
}
@

Open will never fail except for lack of memory.
<<Member functions for class [[GUSIDConDevice]]>>=
GUSISocket * GUSIDConDevice::open(GUSIFileToken & file, int)
{
	const char * path = file.Path();

	GUSISocket * sock = 
		path[8] ? new GUSIDConSocket(path+9) : new GUSIDConSocket(nil);
	if (!sock)
		GUSISetPosixError(ENOMEM);
	return sock;
}
@

\section{Implementation of [[GUSIDConSocket]]}

The implementation of [[GUSIDConSocket]] is trivial.

<<Member functions for class [[GUSIDConSocket]]>>=
GUSIDConSocket::GUSIDConSocket(const char * log)
	: fLog(nil)
{
	if (log)
		fLog = strcpy(new char[strlen(log)+1], log);
}
GUSIDConSocket::~GUSIDConSocket()
{
	delete fLog;
}
@

Read always returns EOF.
<<Overridden member functions for [[GUSIDConSocket]]>>=
virtual ssize_t	read(const GUSIScatterer & buffer);
<<Member functions for class [[GUSIDConSocket]]>>=
ssize_t GUSIDConSocket::read(const GUSIScatterer &)
{
	return 0;
}
@

Writes get translated into their DCon equivalents.
<<Overridden member functions for [[GUSIDConSocket]]>>=
virtual ssize_t write(const GUSIGatherer & buffer);
<<Member functions for class [[GUSIDConSocket]]>>=
ssize_t GUSIDConSocket::write(const GUSIGatherer & buffer)
{	
	dfprintf(fLog, "%.*s", buffer.Length(), buffer.Buffer());
	return buffer.Length();
}
@

DCon sockets implement simple calls.
<<Overridden member functions for [[GUSIDConSocket]]>>=
virtual bool Supports(ConfigOption config);
<<Member functions for class [[GUSIDConSocket]]>>=
bool GUSIDConSocket::Supports(ConfigOption config)
{
	return config == kSimpleCalls;
}
@

As the name says, DCon sockets are consolish.
<<Overridden member functions for [[GUSIDConSocket]]>>=
virtual int	isatty();
<<Member functions for class [[GUSIDConSocket]]>>=
int GUSIDConSocket::isatty()
{ 
	return 1;
}
@

